import os
import json
import logging

from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from decouple import config

API_TOKEN = config('TELEGRAM_BOT_TOKEN')

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class RegistrationStudent(StatesGroup):
    first_name = State()
    last_name = State()
    age = State()
    number_phone = State()
    photo = State()
    programing_language = State()
    level = State()
    about_me = State()
    check = State()
    
levels = ['üòñ', 'üòü', 'üòê', 'üôÇ', 'üòÄ']


def save_data(data, filename='students.json'):
    if not os.path.exists(filename):
        with open(filename, 'w') as f:
            json.dump([], f)
    
    with open(filename, 'r') as f:
        users = json.load(f)
    
    users.append(data)
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)
    
        
    




@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    text = '–ü—Ä—ñ–≤—ñ—Ç, —Ä–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏!\n\n' \
            '–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —â–æ —è –≤–º—ñ—é, —Ç–æ –Ω–∞–ø–∏—à–∏ /help'
    await message.reply(text)

    
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply("–Ø –±–æ—Ç –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è Python. –ü–æ–∫–∏ —â–æ —è –≤–º—ñ—é —Ç—ñ–ª—å–∫–∏ —Ü–µ.")

@dp.message_handler(commands=['reg'])
async def reg_command(message: types.Message):
    await message.reply("–í—ñ—Ç–∞—é –≤ –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ HILLEL!\n" \
                        "–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å.\n" \
                        "–í–∞—à–µ —ñ–º'—è?")
    logging.info(f"User {message.from_user.id} start registration")
    await RegistrationStudent.first_name.set()
    
@dp.message_handler(state=RegistrationStudent.first_name)
async def answer_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text) # –ó–∞–ø–∏—Å—É—î–º–æ –≤ state –¥–∞–Ω—ñ –∑ –ø–µ—Ä—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    await message.reply("–í–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ?")
    logging.info(f"User {message.from_user.id} answer on question 1")
    await RegistrationStudent.next() # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è

@dp.message_handler(state=RegistrationStudent.last_name)
async def answer_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.reply("–ù–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É —Å–≤–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä—Ä—Ä\n –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 30.01.2000")
    logging.info(f"User {message.from_user.id} answer on question 2")
    await RegistrationStudent.next()

@dp.message_handler(state=RegistrationStudent.age)
async def answer_age(message: types.Message, state: FSMContext):
    try:
        user_age = datetime.strptime(message.text, '%d.%m.%Y')
    except ValueError:
        await message.reply("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        return
        
    await state.update_data(age=message.text)
    murkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    murkup.add(types.KeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    await message.reply("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n üîΩ–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüîΩ", reply_markup=murkup)
    logging.info(f"User {message.from_user.id} answer on question 3")
    await RegistrationStudent.next()
    
@dp.message_handler(state=RegistrationStudent.number_phone, content_types=types.ContentTypes.CONTACT)
async def answer_number_phone(message: types.Message, state: FSMContext):
    await state.update_data(number_phone=message.contact.phone_number)
    await message.reply("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤–æ—î —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—å –∞–±–æ 3—Ö4", reply_markup=types.ReplyKeyboardRemove())
    logging.info(f"User {message.from_user.id} answer on question 4")
    await RegistrationStudent.next()
    

@dp.message_handler(state=RegistrationStudent.photo, content_types=types.ContentTypes.PHOTO)
async def answer_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    murkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    murkup.add(types.KeyboardButton("Python"), types.KeyboardButton("Java"), types.KeyboardButton("C#"), types.KeyboardButton("C++"))
    await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–≤—á–∞—Ç–∏", reply_markup=murkup)
    logging.info(f"User {message.from_user.id} answer on question 5")
    await RegistrationStudent.next()
    
@dp.message_handler(state=RegistrationStudent.programing_language)
async def answer_programing_language(message: types.Message, state: FSMContext):
    if message.text not in ("Python", "Java", "C#", "C++"):
        await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–≤—á–∞—Ç–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏")
        return
    
    await state.update_data(programing_language=message.text)
    
    murkup = types.InlineKeyboardMarkup()
    for i, level in enumerate(levels):
        murkup.insert(types.InlineKeyboardButton(level, callback_data=str(i)))
    await message.answer("–ì–æ—Ç–æ–≤–æ!\n", reply_markup=types.ReplyKeyboardRemove())
    await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", reply_markup=murkup)
    logging.info(f"User {message.from_user.id} answer on question 6")
    await RegistrationStudent.next()        

@dp.callback_query_handler(state=RegistrationStudent.level)
async def answer_level(call: types.CallbackQuery, state: FSMContext):
    await call.answer('–í–∏–±—Ä–∞–Ω–æ —Ä—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è\n –î—è–∫—É—é!', show_alert=True)
    await state.update_data(level=call.data)
    await call.message.edit_text("–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ —Å–µ–±–µ —ñ —â–æ –≤–∏ –æ—á—ñ–∫—É—î—Ç–µ –≤—ñ–¥ –Ω–∞–≤—á–∞–Ω–Ω—è")
    logging.info(f"User {call.from_user.id} answer on question 7")
    await RegistrationStudent.next()
    
@dp.message_handler(state=RegistrationStudent.about_me)
async def answer_about_me(message: types.Message, state: FSMContext):
    await state.update_data(about_me=message.text)
    data = await state.get_data()
    text = "–í–∞—à—ñ –¥–∞–Ω—ñ:\n"
    text += f"–Ü–º'—è: {data['first_name']}\n"
    text += f"–ü—Ä—ñ–∑–≤–∏—â–µ: {data['last_name']}\n"
    text += f"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data['age']}\n"
    text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {data['number_phone']}\n"
    text += f"–ú–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: {data['programing_language']}\n"
    text += f"–†—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –º–æ–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: {levels[int(data['level'])]}\n"
    text += f"–ü—Ä–æ —Å–µ–±–µ: {data['about_me']}\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üëç–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm"))
    markup.add(types.InlineKeyboardButton("üëé–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel"))
    await message.answer_photo(data['photo'], caption=text, reply_markup=markup)
    logging.info(f"User {message.from_user.id} answer on question 8")
    await RegistrationStudent.next()

@dp.callback_query_handler(state=RegistrationStudent.check, text="confirm")
async def confirm_registration(call: types.CallbackQuery, state: FSMContext):
    await call.answer("–ü–æ—á–µ–∫–∞–π—Ç–µ, —Ä–µ—î—Å—Ç—Ä—É—é –≤–∞—Å...", show_alert=True)
    data = await state.get_data()
    save_data(data)
    await call.message.edit_caption(f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å!\n\n{call.message.caption}")
    logging.info(f"User {call.from_user.id} answer on question 9")
    await state.finish()

@dp.callback_query_handler(state=RegistrationStudent.check, text="cancel")
async def cancel_registration(call: types.CallbackQuery, state: FSMContext):    
    await call.answer("–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", show_alert=True)
    await call.message.delete()
    logging.info(f"User {call.from_user.id} answer on question 9")
    await state.finish()
    



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    

